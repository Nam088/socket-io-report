import{_ as r,c,f as l,w as e,S as i,e as s,o as a,d as o,b as n,r as d}from"./app.023fc6b8.js";const k=JSON.parse('{"title":"Realtime Processor","description":"","frontmatter":{},"headers":[{"level":2,"title":"Sections","slug":"sections","link":"#sections","children":[]},{"level":2,"title":"\u{1F527} Architecture","slug":"\u{1F527}-architecture","link":"#\u{1F527}-architecture","children":[]},{"level":2,"title":"\u{1F4C8} Metrics collected","slug":"\u{1F4C8}-metrics-collected","link":"#\u{1F4C8}-metrics-collected","children":[]},{"level":2,"title":"\u{1F9EA} Test cases","slug":"\u{1F9EA}-test-cases","link":"#\u{1F9EA}-test-cases","children":[]}],"relativePath":"realtime-processer/index.md","lastUpdated":1758894949000}'),h={name:"realtime-processer/index.md"},p=s('<h1 id="realtime-processor" tabindex="-1">Realtime Processor <a class="header-anchor" href="#realtime-processor" aria-hidden="true">#</a></h1><p>Collects metrics (RAM, CPU, connections, coverage) and writes load reports used in Local Benchmarks.</p><h2 id="sections" tabindex="-1">Sections <a class="header-anchor" href="#sections" aria-hidden="true">#</a></h2><ul><li>\u{1F527} Architecture</li><li>\u{1F4C8} Metrics collected</li><li>\u{1F9EA} Test cases</li><li>\u{1F517} See: <a href="/socket-io-report/local/">/local/</a> for results</li></ul><h2 id="\u{1F527}-architecture" tabindex="-1">\u{1F527} Architecture <a class="header-anchor" href="#\u{1F527}-architecture" aria-hidden="true">#</a></h2>',5),_=s(`<h2 id="\u{1F4C8}-metrics-collected" tabindex="-1">\u{1F4C8} Metrics collected <a class="header-anchor" href="#\u{1F4C8}-metrics-collected" aria-hidden="true">#</a></h2><ul><li>RAM: rss, heapUsed, heapTotal, external, arrayBuffers</li><li>CPU: peak, average (interval-based)</li><li>Connections: total, per-namespace</li><li>Messages: expected vs received, per-batch coverage</li></ul><h2 id="\u{1F9EA}-test-cases" tabindex="-1">\u{1F9EA} Test cases <a class="header-anchor" href="#\u{1F9EA}-test-cases" aria-hidden="true">#</a></h2><p>Use the benchmark CLI to drive scenarios; reports are generated alongside.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm run test:10k</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run test:20k</span></span>
<span class="line"></span></code></pre></div>`,5);function u(m,A,f,g,C,T){const t=d("Mermaid");return a(),c("div",null,[p,(a(),l(i,null,{default:e(()=>[o(t,{id:"mermaid-34",class:"mermaid",graph:"flowchart%20TD%0A%20%20A%5BCollector%20schedule%5D%20--%3E%20B%5BSample%20Node%20process%5D%0A%20%20B%20--%3E%20C%5BQuery%20Socket.IO%20stats%5D%0A%20%20C%20--%3E%20D%5BAggregate%20%2B%20compute%20coverage%5D%0A%20%20D%20--%3E%20E%5BWrite%20JSON%20load%20report%5D%0A%20%20E%20--%3E%20F%5BRender%20tables%20in%20Local%5D%0A"})]),fallback:e(()=>[n(" Loading... ")]),_:1})),_])}const S=r(h,[["render",u]]);export{k as __pageData,S as default};
